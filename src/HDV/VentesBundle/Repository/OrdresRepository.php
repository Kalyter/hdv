<?php

namespace HDV\VentesBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * OrdresRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdresRepository extends \Doctrine\ORM\EntityRepository
{

  public function getordresfutur()
   {
     $qb = $this->createQueryBuilder('o')
       ->join('o.codevac', 'c')
       ->where('c.date > :datecourant')
       ->setParameter('datecourant', new \Datetime('now'))
       ->orderBy('o.id', 'DESC')
     ;

     return $qb
       ->getQuery()
       ->getResult()
     ;
   }

   public function getordresold()
    {
      $qb = $this->createQueryBuilder('o')
        ->join('o.codevac', 'c')
        ->where('c.date < :datecourant')
        ->setParameter('datecourant', new \Datetime('now'))
        ->orderBy('o.id', 'DESC')
      ;

      return $qb
        ->getQuery()
        ->getResult()
      ;
    }

    public function getMesOrdres($userid, $page, $nbPerPage)
    {
      $query = $this->createQueryBuilder('o')
        ->where('o.user = :userid')
        ->setParameter('userid', $userid)
        ->leftJoin('o.codevac', 'v')
        ->addSelect('v')
        ->leftJoin('o.object', 'l')
        ->addSelect('l')
        ->orderBy('v.date', 'DESC')
        ->getQuery()
      ;

      $query
        // On définit l'annonce à partir de laquelle commencer la liste
        ->setFirstResult(($page-1) * $nbPerPage)
        // Ainsi que le nombre d'annonce à afficher sur une page
        ->setMaxResults($nbPerPage)
      ;

      // Enfin, on retourne l'objet Paginator correspondant à la requête construite
      // (n'oubliez pas le use correspondant en début de fichier)
      return new Paginator($query, true);
    }
}
